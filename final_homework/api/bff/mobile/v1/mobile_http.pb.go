// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MobileHTTPServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserResponse, error)
	PostIndex(context.Context, *ListPostRequest) (*ListPostReply, error)
	PostShow(context.Context, *GetPostRequest) (*GetPostReply, error)
	SignInByPwd(context.Context, *SignInByPwdRequest) (*SignInResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error)
}

func RegisterMobileHTTPServer(s *http.Server, srv MobileHTTPServer) {
	r := s.Route("/")
	r.POST("/api/sign_up", _Mobile_SignUp0_HTTP_Handler(srv))
	r.POST("/api/sign_in_by_pwd", _Mobile_SignInByPwd0_HTTP_Handler(srv))
	r.GET("/api/current_user", _Mobile_CurrentUser0_HTTP_Handler(srv))
	r.POST("/api/posts", _Mobile_CreatePost0_HTTP_Handler(srv))
	r.GET("/api/posts", _Mobile_PostIndex0_HTTP_Handler(srv))
	r.GET("/api/posts/{id}", _Mobile_PostShow0_HTTP_Handler(srv))
	r.PUT("/api/current_user", _Mobile_UpdatePost0_HTTP_Handler(srv))
}

func _Mobile_SignUp0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignUpRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/SignUp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignUp(ctx, req.(*SignUpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignUpResponse)
		return ctx.Result(200, reply)
	}
}

func _Mobile_SignInByPwd0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignInByPwdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/SignInByPwd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignInByPwd(ctx, req.(*SignInByPwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignInResponse)
		return ctx.Result(200, reply)
	}
}

func _Mobile_CurrentUser0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CurrentUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/CurrentUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CurrentUser(ctx, req.(*CurrentUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CurrentUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Mobile_CreatePost0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/CreatePost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostReply)
		return ctx.Result(200, reply)
	}
}

func _Mobile_PostIndex0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/PostIndex")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostIndex(ctx, req.(*ListPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPostReply)
		return ctx.Result(200, reply)
	}
}

func _Mobile_PostShow0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/PostShow")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostShow(ctx, req.(*GetPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPostReply)
		return ctx.Result(200, reply)
	}
}

func _Mobile_UpdatePost0_HTTP_Handler(srv MobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.mobile.v1.Mobile/UpdatePost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*UpdatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostReply)
		return ctx.Result(200, reply)
	}
}

type MobileHTTPClient interface {
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...http.CallOption) (rsp *CreatePostReply, err error)
	CurrentUser(ctx context.Context, req *CurrentUserRequest, opts ...http.CallOption) (rsp *CurrentUserResponse, err error)
	PostIndex(ctx context.Context, req *ListPostRequest, opts ...http.CallOption) (rsp *ListPostReply, err error)
	PostShow(ctx context.Context, req *GetPostRequest, opts ...http.CallOption) (rsp *GetPostReply, err error)
	SignInByPwd(ctx context.Context, req *SignInByPwdRequest, opts ...http.CallOption) (rsp *SignInResponse, err error)
	SignUp(ctx context.Context, req *SignUpRequest, opts ...http.CallOption) (rsp *SignUpResponse, err error)
	UpdatePost(ctx context.Context, req *UpdatePostRequest, opts ...http.CallOption) (rsp *UpdatePostReply, err error)
}

type MobileHTTPClientImpl struct {
	cc *http.Client
}

func NewMobileHTTPClient(client *http.Client) MobileHTTPClient {
	return &MobileHTTPClientImpl{client}
}

func (c *MobileHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...http.CallOption) (*CreatePostReply, error) {
	var out CreatePostReply
	pattern := "/api/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/CreatePost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MobileHTTPClientImpl) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...http.CallOption) (*CurrentUserResponse, error) {
	var out CurrentUserResponse
	pattern := "/api/current_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/CurrentUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MobileHTTPClientImpl) PostIndex(ctx context.Context, in *ListPostRequest, opts ...http.CallOption) (*ListPostReply, error) {
	var out ListPostReply
	pattern := "/api/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/PostIndex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MobileHTTPClientImpl) PostShow(ctx context.Context, in *GetPostRequest, opts ...http.CallOption) (*GetPostReply, error) {
	var out GetPostReply
	pattern := "/api/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/PostShow"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MobileHTTPClientImpl) SignInByPwd(ctx context.Context, in *SignInByPwdRequest, opts ...http.CallOption) (*SignInResponse, error) {
	var out SignInResponse
	pattern := "/api/sign_in_by_pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/SignInByPwd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MobileHTTPClientImpl) SignUp(ctx context.Context, in *SignUpRequest, opts ...http.CallOption) (*SignUpResponse, error) {
	var out SignUpResponse
	pattern := "/api/sign_up"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/SignUp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MobileHTTPClientImpl) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...http.CallOption) (*UpdatePostReply, error) {
	var out UpdatePostReply
	pattern := "/api/current_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.mobile.v1.Mobile/UpdatePost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
